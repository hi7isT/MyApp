package com.example.huanghy.myapp;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

/**
 * Activity活动的生命周期详解
 *
 *      活动状态：
 *          每个活动在其生命周期中最多可能会有四种状态。
 *          1. 运行状态
 *              当一个活动位于返回栈的栈顶时，这时活动就处于运行状态。系统最不愿意回收的
 *              就是处于运行状态的活动，因为这会带来非常差的用户体验。
 *          2. 暂停状态
 *              当一个活动不再处于栈顶位置，但仍然可见时，这时活动就进入了暂停状态。你可
 *              能会觉得既然活动已经不在栈顶了，还怎么会可见呢？这是因为并不是每一个活动都会
 *              占满整个屏幕的，比如对话框形式的活动只会占用屏幕中间的部分区域，你很快就会在
 *              后面看到这种活动。处于暂停状态的活动仍然是完全存活着的，系统也不愿意去回收这
 *              种活动（因为它还是可见的，回收可见的东西都会在用户体验方面有不好的影响），只
 *              有在内存极低的情况下，系统才会去考虑回收这种活动。
 *          3. 停止状态
 *              当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。系统
 *              仍然会为这种活动保存相应的状态和成员变量，但是这并不是完全可靠的，当其他地方
 *              需要内存时，处于停止状态的活动有可能会被系统回收。
 *          4. 销毁状态
 *              当一个活动从返回栈中移除后就变成了销毁状态。系统会最倾向于回收处于这种状
 *              态的活动，从而保证手机的内存充足。
 *
 *       活动的生存期:
 *          Activity 类中定义了七个回调方法，覆盖了活动生命周期的每一个环节，下面我来一一
 *          介绍下这七个方法。
 *          1. onCreate()
 *              这个方法你已经看到过很多次了，每个活动中我们都重写了这个方法，它会在活动
 *              第一次被创建的时候调用。你应该在这个方法中完成活动的初始化操作，比如说加载布
 *              局、绑定事件等。
 *          2. onStart()
 *              这个方法在活动由不可见变为可见的时候调用。
 *          3. onResume()
 *              这个方法在活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的
 *              栈顶，并且处于运行状态。
 *          4. onPause()
 *              这个方法在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方
 *              法中将一些消耗CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度
 *              一定要快，不然会影响到新的栈顶活动的使用。
 *          5. onStop()
 *              这个方法在活动完全不可见的时候调用。它和onPause()方法的主要区别在于，如
 *              果启动的新活动是一个对话框式的活动，那么onPause()方法会得到执行，而onStop()
 *              方法并不会执行。
 *          6. onDestroy()
 *              这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。
 *          7. onRestart()
 *              这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。
 *              以上七个方法中除了onRestart()方法，其他都是两两相对的，从而又可以将活动分为三
 *              种生存期。












 */

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
